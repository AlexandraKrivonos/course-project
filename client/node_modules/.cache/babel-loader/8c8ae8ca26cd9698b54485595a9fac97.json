{"ast":null,"code":"const jwt = require(\"jsonwebtoken\");\n\nconst config = require(\"config\");\n\nmodule.exports = (req, res, next) => {\n  if (req.method === \"OPTIONS\") {\n    return next();\n  }\n\n  try {\n    const token = req.headers.authorization.split(\" \")[1];\n\n    if (!token) {\n      res.status(401).json({\n        message: \"You do not have authorization\"\n      });\n    }\n\n    const decoded = jwt.verify(token, config.get(\"jwtSecret\"));\n    req.user = decoded;\n    next();\n  } catch (e) {\n    res.status(401).json({\n      message: \"You do not have authorization\"\n    });\n  }\n};","map":{"version":3,"sources":["D:/course/middleware/auth.middleware.js"],"names":["jwt","require","config","module","exports","req","res","next","method","token","headers","authorization","split","status","json","message","decoded","verify","get","user","e"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACnC,MAAIF,GAAG,CAACG,MAAJ,KAAe,SAAnB,EAA8B;AAC5B,WAAOD,IAAI,EAAX;AACD;;AAED,MAAI;AACF,UAAME,KAAK,GAAGJ,GAAG,CAACK,OAAJ,CAAYC,aAAZ,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;;AAEA,QAAI,CAACH,KAAL,EAAY;AACVH,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AACD;;AACD,UAAMC,OAAO,GAAGhB,GAAG,CAACiB,MAAJ,CAAWR,KAAX,EAAkBP,MAAM,CAACgB,GAAP,CAAW,WAAX,CAAlB,CAAhB;AACAb,IAAAA,GAAG,CAACc,IAAJ,GAAWH,OAAX;AACAT,IAAAA,IAAI;AACL,GATD,CASE,OAAOa,CAAP,EAAU;AACVd,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD;AACF,CAjBD","sourcesContent":["const jwt = require(\"jsonwebtoken\");\r\nconst config = require(\"config\");\r\n\r\nmodule.exports = (req, res, next) => {\r\n  if (req.method === \"OPTIONS\") {\r\n    return next();\r\n  }\r\n\r\n  try {\r\n    const token = req.headers.authorization.split(\" \")[1];\r\n\r\n    if (!token) {\r\n      res.status(401).json({ message: \"You do not have authorization\" });\r\n    }\r\n    const decoded = jwt.verify(token, config.get(\"jwtSecret\"));\r\n    req.user = decoded;\r\n    next();\r\n  } catch (e) {\r\n    res.status(401).json({ message: \"You do not have authorization\" });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}