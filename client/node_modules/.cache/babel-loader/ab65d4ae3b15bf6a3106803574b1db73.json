{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n\n    try {\n      console.log(process.env);\n\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-Type'] = 'application/json';\n      }\n\n      const response = await fetch(process.env.REACT_APP_API_URL + url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Something went wrong');\n      }\n\n      setLoading(false);\n      return data;\n    } catch (error) {\n      setLoading(false);\n      setError(error.message);\n      throw error;\n    }\n  }, []);\n\n  const clearError = () => setError(null);\n\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"MstwQpYZpw83DP6eQvw4fjC0Jxg=\");","map":{"version":3,"sources":["D:/course/client/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","console","log","process","env","JSON","stringify","response","fetch","REACT_APP_API_URL","data","json","ok","Error","message","clearError"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAE,KAAF,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAE,IAAF,CAAlC;AACA,QAAMO,OAAO,GAAGN,WAAW,CAAC,OAAOO,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AAClFP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAApB;;AAEA,UAAGL,IAAH,EAAS;AACLA,QAAAA,IAAI,GAAGM,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAP;AACAC,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;AAEH;;AAEJ,YAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,CAACC,GAAR,CAAYK,iBAAZ,GAAgCZ,GAAjC,EAAsC;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAtC,CAA5B;AACA,YAAMU,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;;AAED,UAAI,CAACJ,QAAQ,CAACK,EAAd,EAAkB;AACb,cAAM,IAAIC,KAAJ,CAAWH,IAAI,CAACI,OAAL,IAAgB,sBAA3B,CAAN;AACJ;;AAEDrB,MAAAA,UAAU,CAAC,KAAD,CAAV;AAEA,aAAOiB,IAAP;AAEC,KApBD,CAoBE,OAAOhB,KAAP,EAAc;AACZD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR;AACA,YAAMpB,KAAN;AACH;AAEJ,GA5B0B,EA4BxB,EA5BwB,CAA3B;;AA8BA,QAAMqB,UAAU,GAAG,MAAMpB,QAAQ,CAAC,IAAD,CAAjC;;AAEA,SAAO;AAACH,IAAAA,OAAD;AAAUI,IAAAA,OAAV;AAAmBF,IAAAA,KAAnB;AAA0BqB,IAAAA;AAA1B,GAAP;AACH,CApCM;;GAAMxB,O","sourcesContent":["import {useState, useCallback} from 'react' \r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState (false)\r\n    const [error, setError] = useState (null)\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true)\r\n        try {\r\n            console.log(process.env)\r\n\r\n            if(body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n\r\n            }\r\n\r\n         const response = await fetch(process.env.REACT_APP_API_URL + url, {method, body, headers})\r\n         const data = await response.json()\r\n\r\n        if (!response.ok) {\r\n             throw new Error (data.message || 'Something went wrong')\r\n        }\r\n\r\n        setLoading(false)\r\n\r\n        return data\r\n\r\n        } catch (error) {\r\n            setLoading(false)\r\n            setError(error.message)\r\n            throw error \r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = () => setError(null)\r\n\r\n    return {loading, request, error, clearError}\r\n}"]},"metadata":{},"sourceType":"module"}