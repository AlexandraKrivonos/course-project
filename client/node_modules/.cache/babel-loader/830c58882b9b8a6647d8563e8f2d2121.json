{"ast":null,"code":"const {\n  Router\n} = require('express');\n\nconst bcrypt = require('bcryptjs');\n\nconst jwt = require('jsonwebtoken');\n\nconst config = require('config');\n\nconst {\n  check,\n  validationResult\n} = require('express-validator');\n\nconst User = require('../models/User');\n\nconst router = Router();\nrouter.post('/register', [check('email', 'Incorrect email').isEmail(), check('password', 'Minimum password length 6 characters').isLength({\n  min: 6\n})], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        errors: errors.array(),\n        message: 'Incorrect data during registration'\n      });\n    }\n\n    const {\n      email,\n      name,\n      password\n    } = req.body;\n    const candidate = await User.findOne({\n      email\n    });\n    const userName = await User.findOne({\n      name\n    });\n\n    if (candidate) {\n      return res.status(400).json({\n        message: 'Such user exists'\n      });\n    }\n\n    if (userName) {\n      return res.status(400).json({\n        message: 'Given name is taken'\n      });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 12);\n    const user = new User({\n      email,\n      password: hashedPassword,\n      name\n    });\n    console.log(`${user}`);\n    await user.save();\n    res.status(201).json({\n      message: 'User created'\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Something went wrong, please try again'\n    });\n  }\n});\nrouter.post('/login', [check('email', 'Enter correct email').normalizeEmail().isEmail(), check('password', 'Enter correct email').exists()], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        errors: errors.array(),\n        message: 'Incorrect login data'\n      });\n    }\n\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await User.findOne({\n      email\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        message: 'User is not found'\n      });\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n\n    if (!isMatch) {\n      return res.status(400).json({\n        message: 'Invalid password'\n      });\n    }\n\n    const token = jwt.sign({\n      userId: user.id,\n      userName: user.name\n    }, config.get('jwtSecret'), {\n      expiresIn: '1h'\n    });\n    res.json({\n      token,\n      userId: user.id\n    });\n  } catch (error) {\n    res.status(500).json({\n      message: 'Something went wrong, please try again'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"sources":["D:/course/routes/auth.routes.js"],"names":["Router","require","bcrypt","jwt","config","check","validationResult","User","router","post","isEmail","isLength","min","req","res","errors","isEmpty","status","json","array","message","email","name","password","body","candidate","findOne","userName","hashedPassword","hash","user","console","log","save","error","normalizeEmail","exists","isMatch","compare","token","sign","userId","id","get","expiresIn","module","exports"],"mappings":"AAAA,MAAM;AAACA,EAAAA;AAAD,IAAWC,OAAO,CAAE,SAAF,CAAxB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAE,UAAF,CAAtB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAE,cAAF,CAAnB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAE,QAAF,CAAtB;;AACA,MAAM;AAACI,EAAAA,KAAD;AAAQC,EAAAA;AAAR,IAA4BL,OAAO,CAAE,mBAAF,CAAzC;;AACA,MAAMM,IAAI,GAAGN,OAAO,CAAE,gBAAF,CAApB;;AACA,MAAMO,MAAM,GAAGR,MAAM,EAArB;AAEAQ,MAAM,CAACC,IAAP,CAEI,WAFJ,EAGI,CAEIJ,KAAK,CAAC,OAAD,EAAS,iBAAT,CAAL,CAAiCK,OAAjC,EAFJ,EAGIL,KAAK,CAAC,UAAD,EAAY,sCAAZ,CAAL,CAAyDM,QAAzD,CAAmE;AAACC,EAAAA,GAAG,EAAG;AAAP,CAAnE,CAHJ,CAHJ,EASI,OAAOC,GAAP,EAAWC,GAAX,KAAmB;AAEnB,MAAI;AACA,UAAMC,MAAM,GAAGT,gBAAgB,CAACO,GAAD,CAA/B;;AAEA,QAAI,CAACE,MAAM,CAACC,OAAP,EAAL,EAAuB;AACnB,aAAOF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBH,QAAAA,MAAM,EAAGA,MAAM,CAACI,KAAP,EADe;AAExBC,QAAAA,OAAO,EAAG;AAFc,OAArB,CAAP;AAIH;;AAED,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAA0BV,GAAG,CAACW,IAApC;AAEA,UAAMC,SAAS,GAAG,MAAMlB,IAAI,CAACmB,OAAL,CAAa;AAACL,MAAAA;AAAD,KAAb,CAAxB;AAEA,UAAMM,QAAQ,GAAG,MAAMpB,IAAI,CAACmB,OAAL,CAAa;AAACJ,MAAAA;AAAD,KAAb,CAAvB;;AAEA,QAAIG,SAAJ,EAAe;AACb,aAAQX,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAtB,CAAR;AACD;;AAED,QAAIO,QAAJ,EAAc;AACV,aAAQb,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAtB,CAAR;AACH;;AAID,UAAMQ,cAAc,GAAI,MAAM1B,MAAM,CAAC2B,IAAP,CAAYN,QAAZ,EAAsB,EAAtB,CAA9B;AACA,UAAMO,IAAI,GAAG,IAAIvB,IAAJ,CAAU;AAAEc,MAAAA,KAAF;AAASE,MAAAA,QAAQ,EAAEK,cAAnB;AAAmCN,MAAAA;AAAnC,KAAV,CAAb;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEF,IAAK,EAApB;AACA,UAAMA,IAAI,CAACG,IAAL,EAAN;AAEAnB,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,MAAAA,OAAO,EAAE;AAAX,KAArB;AAEH,GAjCD,CAiCE,OAAOc,KAAP,EAAc;AACZpB,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB;AAACE,MAAAA,OAAO,EAAE;AAAV,KAAtB;AAEH;AAEJ,CAjDD;AAmDAZ,MAAM,CAACC,IAAP,CACI,QADJ,EAEI,CACIJ,KAAK,CAAC,OAAD,EAAU,qBAAV,CAAL,CAAsC8B,cAAtC,GAAuDzB,OAAvD,EADJ,EAEIL,KAAK,CAAC,UAAD,EAAa,qBAAb,CAAL,CAAyC+B,MAAzC,EAFJ,CAFJ,EAOI,OAAOvB,GAAP,EAAWC,GAAX,KAAmB;AACnB,MAAI;AACA,UAAMC,MAAM,GAAGT,gBAAgB,CAACO,GAAD,CAA/B;;AAEA,QAAI,CAACE,MAAM,CAACC,OAAP,EAAL,EAAuB;AACnB,aAAOF,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBH,QAAAA,MAAM,EAAGA,MAAM,CAACI,KAAP,EADe;AAExBC,QAAAA,OAAO,EAAG;AAFc,OAArB,CAAP;AAIH;;AAED,UAAM;AAACC,MAAAA,KAAD;AAAOE,MAAAA;AAAP,QAAmBV,GAAG,CAACW,IAA7B;AAEA,UAAMM,IAAI,GAAG,MAAMvB,IAAI,CAACmB,OAAL,CAAa;AAAEL,MAAAA;AAAF,KAAb,CAAnB;;AAEA,QAAI,CAACS,IAAL,EAAW;AACP,aAAOhB,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBE,QAAAA,OAAO,EAAG;AADc,OAArB,CAAP;AAGH;;AAED,UAAMiB,OAAO,GAAG,MAAMnC,MAAM,CAACoC,OAAP,CAAef,QAAf,EAAyBO,IAAI,CAACP,QAA9B,CAAtB;;AAEA,QAAG,CAACc,OAAJ,EAAa;AACT,aAAOvB,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBE,QAAAA,OAAO,EAAE;AADe,OAArB,CAAP;AAGH;;AAED,UAAMmB,KAAK,GAAGpC,GAAG,CAACqC,IAAJ,CACV;AAACC,MAAAA,MAAM,EAAGX,IAAI,CAACY,EAAf;AACAf,MAAAA,QAAQ,EAAGG,IAAI,CAACR;AADhB,KADU,EAGVlB,MAAM,CAACuC,GAAP,CAAW,WAAX,CAHU,EAIV;AAACC,MAAAA,SAAS,EAAG;AAAb,KAJU,CAAd;AAOA9B,IAAAA,GAAG,CAACI,IAAJ,CAAS;AAAEqB,MAAAA,KAAF;AAASE,MAAAA,MAAM,EAAGX,IAAI,CAACY;AAAvB,KAAT;AAEH,GArCD,CAqCE,OAAOR,KAAP,EAAc;AACZpB,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB;AAACE,MAAAA,OAAO,EAAE;AAAV,KAAtB;AACH;AAEJ,CAjDD;AAmDAyB,MAAM,CAACC,OAAP,GAAiBtC,MAAjB","sourcesContent":["const {Router} = require ('express')\r\nconst bcrypt = require ('bcryptjs')\r\nconst jwt = require ('jsonwebtoken')\r\nconst config = require ('config')\r\nconst {check, validationResult} = require ('express-validator')\r\nconst User = require ('../models/User')\r\nconst router = Router()\r\n\r\nrouter.post(\r\n    \r\n    '/register',\r\n    [\r\n      \r\n        check('email','Incorrect email').isEmail(),\r\n        check('password','Minimum password length 6 characters').isLength( {min : 6 }),\r\n\r\n    ],\r\n    async (req,res) => {\r\n       \r\n    try {\r\n        const errors = validationResult(req)\r\n\r\n        if (!errors.isEmpty()) {\r\n            return res.status(400).json({\r\n                errors : errors.array(),\r\n                message : 'Incorrect data during registration'\r\n            })\r\n        }\r\n\r\n        const {email, name, password} = req.body\r\n\r\n        const candidate = await User.findOne({email})\r\n\r\n        const userName = await User.findOne({name})\r\n\r\n        if (candidate) {\r\n          return  res.status(400).json ({ message: 'Such user exists' })\r\n        }\r\n\r\n        if (userName) {\r\n            return  res.status(400).json ({ message: 'Given name is taken' })\r\n        }\r\n\r\n\r\n\r\n        const hashedPassword =  await bcrypt.hash(password, 12)\r\n        const user = new User ({ email, password: hashedPassword, name})\r\n        console.log(`${user}`)\r\n        await user.save()\r\n\r\n        res.status(201).json({ message: 'User created'})\r\n\r\n    } catch (error) {\r\n        res.status(500).json ({message: 'Something went wrong, please try again'})\r\n        \r\n    }\r\n\r\n})\r\n\r\nrouter.post(\r\n    '/login',\r\n    [\r\n        check('email', 'Enter correct email').normalizeEmail().isEmail(),\r\n        check('password', 'Enter correct email').exists()\r\n\r\n    ],\r\n    async (req,res) => {\r\n    try {\r\n        const errors = validationResult(req)\r\n\r\n        if (!errors.isEmpty()) {\r\n            return res.status(400).json({\r\n                errors : errors.array(),\r\n                message : 'Incorrect login data'\r\n            })\r\n        }\r\n\r\n        const {email,password} = req.body\r\n\r\n        const user = await User.findOne({ email })\r\n\r\n        if (!user) {\r\n            return res.status(400).json({\r\n                message : 'User is not found'\r\n            })\r\n        }\r\n\r\n        const isMatch = await bcrypt.compare(password, user.password)\r\n\r\n        if(!isMatch) {\r\n            return res.status(400).json({\r\n                message: 'Invalid password'\r\n            })\r\n        }\r\n\r\n        const token = jwt.sign(\r\n            {userId : user.id,\r\n            userName : user.name},\r\n            config.get('jwtSecret'),\r\n            {expiresIn : '1h'}\r\n        )\r\n\r\n        res.json({ token, userId : user.id })\r\n       \r\n    } catch (error) {\r\n        res.status(500).json ({message: 'Something went wrong, please try again'})\r\n    }\r\n\r\n})\r\n\r\nmodule.exports = router "]},"metadata":{},"sourceType":"script"}